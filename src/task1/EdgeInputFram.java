package task1;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.graph.DirectedSparseGraph;
import edu.uci.ics.jung.graph.SparseGraph;
import edu.uci.ics.jung.visualization.VisualizationImageServer;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.lang.reflect.Array;
import javax.swing.JFrame;
import org.apache.commons.collections15.Transformer;
import java.util.*; 
import javax.swing.JOptionPane;


/**
 *
 * @author Home
 */
public class EdgeInputFram extends javax.swing.JFrame {

    /** Creates new form EdgeInput */
    public EdgeInputFram() {
        initComponents();
        setLocationRelativeTo(null);
        finishBt.setEnabled(false);


        greenTx.setVisible(false);
        
        Vector<String> vertices = new Vector<>();
        vertices = VertexNameInputFram.graph.getVertices();

        if (MainFram.directed == true) {
            for (int i = 0; i < vertices.size(); i++) {
                directedGraph.addVertex(vertices.get(i));
            }
        } else {
            for (int i = 0; i < vertices.size(); i++) {
                unDirectedGraph.addVertex(vertices.get(i));
            }
        }
        System.out.println(VertexNameInputFram.graph.getVertices());
        /*MainFram.g = new Graph(5);
        MainFram.g.addEdge(0,1);
        MainFram.g.addEdge(1,2);
        MainFram.g.addEdge(2,5);*/



    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        finishBt = new javax.swing.JButton();
        enterInitialLab = new javax.swing.JLabel();
        enterTerminalLab = new javax.swing.JLabel();
        initialVertex = new javax.swing.JTextField();
        terminalVertex = new javax.swing.JTextField();
        enterEdgeBt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        greenTx = new javax.swing.JLabel();
        bluTx2 = new javax.swing.JLabel();
        enterTerminalLab1 = new javax.swing.JLabel();
        weightTx = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Here to Enter Edges");

        finishBt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        finishBt.setForeground(new java.awt.Color(0, 102, 102));
        finishBt.setText("Finish");
        finishBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishBtActionPerformed(evt);
            }
        });

        enterInitialLab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        enterInitialLab.setText("Enter Initial Vertex :");

        enterTerminalLab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        enterTerminalLab.setText("Enter Terminal Vertex :");

        initialVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialVertexActionPerformed(evt);
            }
        });

        terminalVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminalVertexActionPerformed(evt);
            }
        });

        enterEdgeBt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        enterEdgeBt.setText("Add Edge ");
        enterEdgeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterEdgeBtActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("After Add All Edges Press Finish");

        greenTx.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        greenTx.setForeground(new java.awt.Color(0, 204, 0));
        greenTx.setText("Edge 1 Added Successfully,You Can Add More");

        bluTx2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bluTx2.setForeground(new java.awt.Color(0, 0, 255));
        bluTx2.setText("Enter Edge 1");

        enterTerminalLab1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        enterTerminalLab1.setText("Enter Edge Name  :");

        weightTx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightTxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterInitialLab)
                            .addComponent(enterTerminalLab))
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(initialVertex, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(terminalVertex, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightTx, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enterEdgeBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(finishBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(bluTx2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(greenTx))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(enterTerminalLab1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(bluTx2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterInitialLab)
                    .addComponent(initialVertex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterTerminalLab)
                    .addComponent(terminalVertex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterEdgeBt))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterTerminalLab1)
                    .addComponent(weightTx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(greenTx, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(finishBt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialVertexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_initialVertexActionPerformed

    private void terminalVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminalVertexActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_terminalVertexActionPerformed

    private void finishBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishBtActionPerformed
        // TODO add your handling code here:
//        if(Objects.equals(newEdge.getText(), "1")){
//            enterInitialLab.setVisible(true);
//            enterTerminalLab.setVisible(true);
//            initialVertex.setVisible(true);
//            terminalVertex.setVisible(true);
//            enterEdgeBt.setVisible(true);
//            newEdge.setText("");
//
//            
//        }
//        else if(Objects.equals(newEdge.getText(), "")){
//            JOptionPane.showMessageDialog(this, "Please fill requirements ",  
//                       "WARNING", JOptionPane.WARNING_MESSAGE); 
//        }
//        else{
            OutPutFram outFram = new OutPutFram();
            outFram.textArea.setText("");
            
            int IncidenceMatrix[][];
            Vector<vertex> adjacencyList = VertexNameInputFram.graph.adjacencyList();///after it print

            for(int i = 0 ; i < adjacencyList.size() ; i++ ){
                outFram.textArea.setText(outFram.textArea.getText() + adjacencyList.get(i).vertexName + " : " );
                for(int j = 0 ; j < adjacencyList.get(i).adjacentVertices.size() ; j++ ){
                    outFram.textArea.setText(outFram.textArea.getText() + adjacencyList.get(i).adjacentVertices.get(j) + " ");
                }
                    outFram.textArea.setText(outFram.textArea.getText() +  "\n");
            }
            outFram.textArea.setText(outFram.textArea.getText() + "\nadjacency matrix : \n");

        
            int adjacentMatrix[][] = VertexNameInputFram.graph.adjacentMatrix();
            int row = adjacentMatrix.length;
            int col = adjacentMatrix[0].length;
            for(int i = 0 ; i < row ; i++){
                for (int j = 0 ; j < col ; j++){
                    outFram.textArea.setText(outFram.textArea.getText() + adjacentMatrix[i][j] + " ");
                }
                    outFram.textArea.setText(outFram.textArea.getText() +  "\n");
            }

            outFram.textArea.setText(outFram.textArea.getText() +  "\nIncidence matrix : \n" );

            if (MainFram.directed == true) IncidenceMatrix = VertexNameInputFram.graph.IncidenceMatrixDirected();
            else IncidenceMatrix = VertexNameInputFram.graph.IncidenceMatrixUndirected();

            int row1 = IncidenceMatrix.length;
            int col1 = IncidenceMatrix[0].length;
            for(int i = 0 ; i < row1 ; i++){
                for (int j = 0 ; j < col1 ; j++){
                    System.out.print(IncidenceMatrix[i][j] + " ");
                    outFram.textArea.setText(outFram.textArea.getText() +  IncidenceMatrix[i][j] + " " );
                }
                outFram.textArea.setText(outFram.textArea.getText() + "\n" );
            }

            outFram.textArea.setText(outFram.textArea.getText() +  "\nRepresentation matrix : \n");
            int representationMatrix[][] = VertexNameInputFram.graph.representationMatrix();


            int row2 = representationMatrix.length;
            int col2 = representationMatrix[0].length;
            for(int i = 0 ; i < row2 ; i++){
                for (int j = 0 ; j < col2 ; j++){
                    outFram.textArea.setText(outFram.textArea.getText() +  representationMatrix[i][j] + " ");

                }
                outFram.textArea.setText(outFram.textArea.getText() + "\n");
            }
            
            
            
            
            
            
            
             
            VisualizationImageServer<String, String> vs;

            if (MainFram.directed == true){
                vs =
                        new VisualizationImageServer<String, String>(new CircleLayout<String, String>(directedGraph), new Dimension(200, 200));
            }
            else{
                vs =
                        new VisualizationImageServer<String, String>(new CircleLayout<String, String>(unDirectedGraph), new Dimension(200, 200));

            }
            
            Transformer<String, String> transformer2 = new Transformer<String, String>() {

                @Override
                public String transform(String arg0) {
                    return arg0;
                }

            };

            vs.getRenderContext().setVertexLabelTransformer(transformer2);


            Transformer<String, String> transformer1 = new Transformer<String, String>() {

                @Override
                public String transform(String arg0){
                    return arg0;
                }
            };

            vs.getRenderContext().setEdgeLabelTransformer(transformer1);
//            outFram.getContentPane().add(vs);
//
//            outFram.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//            outFram.pack();
            outFram.setTitle("console");
            outFram.setVisible(true);
            super.setVisible(false);
            
            JFrame frame = new JFrame();
            frame.getContentPane().add(vs);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
            frame.setSize(400,300);
            if(MainFram.directed)
                frame.setTitle("Directed Graph");
            else
                frame.setTitle("Undirected Graph");
            //frame.setLocationRelativeTo(null);
            int lebar = this.getWidth()/2;
            int tinggi = this.getHeight()/2;
            int x = (Toolkit.getDefaultToolkit().getScreenSize().width/3)-lebar;
            int y = (Toolkit.getDefaultToolkit().getScreenSize().height/2)-tinggi;
            frame.setLocation(x, y);


     //   }
    }//GEN-LAST:event_finishBtActionPerformed

    private void enterEdgeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterEdgeBtActionPerformed
        // TODO add your handling code here:
                

//        boolean numeric = false;
//        int src = 0 , dest = 0; 
//        try {
//            src = Integer.parseInt(initialVertex.getText());
//            dest = Integer.parseInt(terminalVertex.getText());
//        } catch (NumberFormatException e) {
//            numeric = true;
//        }

    
        if(Objects.equals(initialVertex.getText(), "") || Objects.equals(terminalVertex.getText(), "") ){
            JOptionPane.showMessageDialog(this, "Please fill requirements ",  
                       "WARNING", JOptionPane.WARNING_MESSAGE); 
        }
        else if (!VertexNameInputFram.graph.vertices.contains(initialVertex.getText()) ||
               !VertexNameInputFram.graph.vertices.contains(terminalVertex.getText()))
       {
           JOptionPane.showMessageDialog(this, "You must enter one of them " +VertexNameInputFram.graph.vertices ,  
           "ERROR", JOptionPane.ERROR_MESSAGE); 

       }
       else{
        VertexNameInputFram.graph.addAdjacentVertex(weightTx.getText(), initialVertex.getText(), terminalVertex.getText());
        
        if (MainFram.directed == false) {
            VertexNameInputFram.graph.addAdjacentVertex(weightTx.getText(), initialVertex.getText(), terminalVertex.getText());
            
            String str = weightTx.getText();
            while(edgeNamesArr.contains(str)){str+="*" ;}
            edgeNamesArr.add(str);

            
            unDirectedGraph.addEdge(str, initialVertex.getText(), terminalVertex.getText());
            
            greenTx.setText("Edge "+ counter +" Added Successfully,You Can Add More");
            greenTx.setVisible(true);
            finishBt.setEnabled(true);

            initialVertex.setText("");
            terminalVertex.setText("");
            weightTx.setText("");
         
            counter++;
            bluTx2.setText("Enter Edge "+ counter);

        } else{
             String str = weightTx.getText();
             while(edgeNamesArr.contains(str)){str+="*" ;}
             edgeNamesArr.add(str);
             
             directedGraph.addEdge(str, initialVertex.getText(), terminalVertex.getText());
        

//            enterInitialLab.setVisible(false);
//            enterTerminalLab.setVisible(false);
//            initialVertex.setVisible(false);
//            terminalVertex.setVisible(false);
//            enterEdgeBt.setVisible(false);
            greenTx.setText("Edge "+ counter +" Added Successfully,You Can Add More");
            greenTx.setVisible(true);
            finishBt.setEnabled(true);

            initialVertex.setText("");
            terminalVertex.setText("");
            weightTx.setText("");
         
            counter++;
            bluTx2.setText("Enter Edge "+ counter);

            
        }
        }
    }//GEN-LAST:event_enterEdgeBtActionPerformed

    private void weightTxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightTxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightTxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EdgeInputFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EdgeInputFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EdgeInputFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EdgeInputFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EdgeInputFram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bluTx2;
    private javax.swing.JButton enterEdgeBt;
    private javax.swing.JLabel enterInitialLab;
    private javax.swing.JLabel enterTerminalLab;
    private javax.swing.JLabel enterTerminalLab1;
    private javax.swing.JButton finishBt;
    private javax.swing.JLabel greenTx;
    private javax.swing.JTextField initialVertex;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField terminalVertex;
    private javax.swing.JTextField weightTx;
    // End of variables declaration//GEN-END:variables
    public DirectedSparseGraph<String, String> directedGraph = new DirectedSparseGraph<String, String>();
    public SparseGraph<String, String> unDirectedGraph = new SparseGraph<String, String>();
    public int counter = 1 ;
    public ArrayList<String> edgeNamesArr = new ArrayList();

}
